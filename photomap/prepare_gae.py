import os
import subprocess
import pdb
import re

APPENGINE_EGGS_DIR = os.environ["APPENGINE_EGGS_DIR"]

if not os.path.isdir(APPENGINE_EGGS_DIR):
    print "{0} is not a directory.".format(APPENGINE_EGGS_DIR)
    exit(1)

print "Linking eggs..."

def is_ignored_path(file_name):
    is_python_bytecode = file_name.endswith(".pyc")
    is_python_egg_info = file_name.endswith(".egg-info")
    is_python_dist_info = file_name.endswith(".dist-info")
    is_hidden_file = file_name.startswith(".")
    return  is_python_bytecode or is_python_egg_info or is_python_dist_info or is_hidden_file
    
def create_filesystem_link(path):
    egg = os.path.split(path)[1]
    link_path = os.path.join(os.getcwd(), egg)

    if not os.path.exists(path):
        print "{0} does not exists. Cannot create link to nonexisting directory/file.".format(path)
        exit(1)

    if not os.path.exists(link_path):
        subprocess.call(["ln", "-s", path, os.getcwd()])
    elif not os.path.islink(link_path):
        print "{0} is not a symbolic link.".format(egg)    
    else:
        print "Skipping {0}. Link already exists.".format(egg)

def add_to_gitignore(dependency_name):
    with open(".gitignore", "r+w") as gitignore:
        gitignore_content = gitignore.readlines()
        if all([not line.startswith(dependency_name) for line in gitignore_content]):
            gitignore.writelines([
                    os.linesep + "# Automatically generated by GAE environment script" +  os.linesep, 
                    dependency_name + os.linesep])

for egg in os.listdir(APPENGINE_EGGS_DIR):
    path = os.path.join(APPENGINE_EGGS_DIR, egg)
    if is_ignored_path(egg):
        print "{0} is not a real egg and should be ignored. Skipping.".format(egg)
        continue
    print "Linking python egg {0}".format(egg)
    create_filesystem_link(path)
    add_to_gitignore(egg)

